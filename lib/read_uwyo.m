function data = read_uwyo(station_num,snd_date,snd_hour)
%
%Joshua Soderholm, Dec 2017
%AORG, University of Queensland
%
%WHAT:
% Downloads and reads text files generated by uwyo public sounding page
% http://weather.uwyo.edu/upperair/sounding.html
% example request: http://weather.uwyo.edu/cgi-bin/sounding?region=pac&TYPE=TEXT%3ALIST&YEAR=2017&MONTH=12&FROM=1700&TO=1700&STNM=94578
% skip_wraob (logical) - skip wind raobs
%
%INPUT:
%station_num: wmo station id number (int)
%snd_date: datenum for url request (float)
%snd_hour: hour number for url request (int)
%
%OUTPUT:
%              data.flight      (1x1 uniq flight number)
%                  .dt_utc      (1x1 datetime in UTC)
%                  .id          (1x1 bom site id)
%                  .wmo_id      (1x1 wmo site id)
%                  .lat         (1x1 site lat dec degs)
%                  .lon         (1x1 site lon dec degs)
%                  .elev        (1x1 site elevation in m)
%                  .pres        (nx1 presure - hpa)
%                  .h           (nx1 height - m)
%                  .temp        (nx1 temperature - degC)
%                  .tempv       (nx1 virtual temperature - degC)
%                  .dwpt        (nx1 dew point temperature - degC
%                  .rh          (nx1 relative humidity - %)
%                  .wdir        (nx1 wind direction - degTN)
%                  .wspd        (nx1 wind speed - m/s)
%                  .wraob       (1x1 true for wind only sounding)
%                  .amdar       (1x1 false for soundings)
%                  .ddwind      (1x1 false for soundings)   

%Generate request url for uwyo
base_url   = 'http://weather.uwyo.edu/cgi-bin/sounding?region=pac&TYPE=TEXT%3ALIST';
day_hr_str = [num2str(day(snd_date),'%02i'),num2str(snd_hour,'%02i')];
full_url   = [base_url,'&YEAR=',num2str(year(snd_date)),'&MONTH=',num2str(month(snd_date),'%02i'),...
    '&FROM=',day_hr_str,'&TO=',day_hr_str,'&STNM=',num2str(station_num)];
%fetch url request
uwyo_str = webread(full_url);
uwyo_str   = textscan(uwyo_str, '%s','delimiter', '\n','whitespace',''); uwyo_str=uwyo_str{1};

%find data location >>>>>>>>>>>>>>this is very dependent on html structure
idx_data_start  = find(strncmp(uwyo_str,'    hPa',4)) + 2;
idx_atts_start  = find(strncmp(uwyo_str,'</PRE><H3>',10)) + 1;
idx_data_stop   = idx_atts_start - 2;
idx_atts_stop   = idx_atts_start + 5;
if isempty(idx_data_start) %check for no data
    data = [];
    return
end
%extract subsets
snd_data        = uwyo_str(idx_data_start:idx_data_stop);
snd_atts        = uwyo_str(idx_atts_start:idx_atts_stop);
%convert atts from cell into struct
data.flight = snd_atts{3}(46:end);
data.dt_utc = datenum(snd_atts{3}(46:end),'yymmdd/HHMM');
data.id     = snd_atts{1}(46:end);
data.wmo_id = str2num(snd_atts{2}(46:end));
data.lat    = str2num(snd_atts{4}(46:end));
data.lon    = str2num(snd_atts{5}(46:end));
data.elev   = str2num(snd_atts{6}(46:end));
%convert data from cell into struct
empty_vec = nan(size(snd_data));
snd_pres  = empty_vec;
snd_h     = empty_vec;
snd_temp  = empty_vec;
snd_dwpt  = empty_vec;
snd_rh    = empty_vec;
snd_wdir  = empty_vec;
snd_wspd  = empty_vec;
for i=1:length(snd_data)
    %convert as necessart
    tmp_pres  = sscanf(snd_data{i}(1:7),'%f');    if ~isempty(tmp_pres);  snd_pres(i) = tmp_pres;  end
    tmp_h     = sscanf(snd_data{i}(8:14),'%f');   if ~isempty(tmp_h);     snd_h(i)    = tmp_h;     end
    tmp_temp  = sscanf(snd_data{i}(15:21),'%f');  if ~isempty(tmp_temp);  snd_temp(i) = tmp_temp;  end
    tmp_dwpt  = sscanf(snd_data{i}(22:28),'%f');  if ~isempty(tmp_dwpt);  snd_dwpt(i) = tmp_dwpt;  end
    tmp_rh    = sscanf(snd_data{i}(29:35),'%f');  if ~isempty(tmp_rh);    snd_rh(i)   = tmp_rh;  end
    tmp_wdir  = sscanf(snd_data{i}(43:49),'%f');  if ~isempty(tmp_wdir);  snd_wdir(i) = tmp_wdir;  end
    tmp_wspd  = sscanf(snd_data{i}(50:56),'%f');  if ~isempty(tmp_wspd);  snd_wspd(i) = tmp_wspd.*0.514444;  end
end
%wrap w_dir
snd_wdir(snd_wdir==360) = 0;

%add to struct
data.pres  = snd_pres;
data.h     = snd_h;
data.temp  = snd_temp;
data.dwpt  = snd_dwpt;
data.rh    = snd_rh;
data.wdir  = snd_wdir;
data.wspd  = snd_wspd;
data.tempv = calc_tempv(snd_pres, snd_temp, snd_dwpt);

%decide if it's a wind only profile
if all(isnan(snd_temp(2:end)))
    data.wraob = true;
else
    data.wraob = false;
end

data.amdar = false;
data.ddwind= false;

%SHARPPY/shappy/sharptab/thermo.py
function vt=calc_tempv(p, t, td)
%     '''
%     Returns the virtual temperature (C) of a parcel.  If 
%     td is masked, then it returns the temperature passed to the 
%     function.
%     Parameters
%     ----------
%     p : number
%         The pressure of the parcel (hPa)
%     t : number
%         Temperature of the parcel (C)
%     td : number
%         Dew point of parcel (C)
%     Returns
%     -------
%     Virtual temperature (C)
%     '''
eps = 0.62197;
tk  = t + 273.15;
w   = 0.001 .* calc_mixratio(p, td);
vt  = (tk .* (1. + w ./ eps) ./ (1. + w)) - 273.15;

%SHARPPY/shappy/sharptab/params.py
function mixratio=calc_mixratio(p, t)
%     '''
%     Returns the mixing ratio (g/kg) of a parcel
%     Parameters
%     ----------
%     p : number, numpy array
%         Pressure of the parcel (hPa)
%     t : number, numpy array
%         Temperature of the parcel (hPa)
%     Returns
%     -------
%     Mixing Ratio (g/kg) of the given parcel
%     '''
x        = 0.02 .* (t - 12.5 + (7500 ./ p));
wfw      = 1. + (0.0000045 .* p) + (0.0014 .* x .* x);
fwesw    = wfw .* vappres(t);
mixratio = 621.97 .* (fwesw ./ (p - fwesw));

%SHARPPY/shappy/sharptab/params.py
function vp = vappres(t)
%     '''
%     Returns the vapor pressure of dry air at given temperature
%     Parameters
%     ------
%     t : number, numpy array
%         Temperature of the parcel (C)
%     Returns
%     -------
%     Vapor Pressure of dry air
%     '''
pol = t .* (1.1112018e-17 + (t .* -3.0994571e-20));
pol = t .* (2.1874425e-13 + (t .* (-1.789232e-15 + pol)));
pol = t .* (4.3884180e-09 + (t .* (-2.988388e-11 + pol)));
pol = t .* (7.8736169e-05 + (t .* (-6.111796e-07 + pol)));
pol = 0.99999683 + (t .* (-9.082695e-03 + pol));
vp  =  6.1078 ./ pol.^8;
